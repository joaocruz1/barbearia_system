// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(100)
  address   String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  barberSchedules BarberSchedule[]
  appointments    Appointment[]

  @@map("locations")
}

model Barber {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(100)
  phone     String?  @db.VarChar(20)
  email     String?  @db.VarChar(100)
  password  String?  @db.VarChar(255) // Hash da senha usando bcrypt
  role      String   @default("funcionario") @db.VarChar(20) // admin, funcionario
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  schedules    BarberSchedule[]
  appointments Appointment[]

  @@map("barbers")
}

model BarberSchedule {
  id        String   @id @default(cuid())
  barberId  String   @map("barber_id")
  locationId String  @map("location_id")
  weekDay   Int      @map("week_day") // 0=Sunday, 1=Monday, etc.
  startTime String   @map("start_time") // TIME stored as string
  endTime   String   @map("end_time")   // TIME stored as string
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  barber   Barber   @relation(fields: [barberId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@map("barber_schedules")
}

model Plan {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  price       Decimal  @db.Decimal(10, 2)
  description String?
  benefits    Json?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  clients Client[]

  @@map("plans")
}

model Client {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(100)
  phone         String    @unique @db.VarChar(20)
  email         String?   @db.VarChar(100)
  planId        String?   @map("plan_id")
  planStartDate DateTime? @map("plan_start_date") @db.Date
  planEndDate   DateTime? @map("plan_end_date") @db.Date
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  plan         Plan?         @relation(fields: [planId], references: [id])
  appointments Appointment[]
  planUsage    PlanUsage[]

  @@map("clients")
}

model Service {
  id              String   @id @default(cuid())
  name            String   @db.VarChar(100)
  price           Decimal  @db.Decimal(10, 2)
  durationMinutes Int      @map("duration_minutes")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  appointments Appointment[]

  @@map("services")
}

model Appointment {
  id            String   @id @default(cuid())
  clientId      String   @map("client_id")
  barberId      String   @map("barber_id")
  locationId    String   @map("location_id")
  serviceId     String   @map("service_id")
  appointmentDate DateTime @map("appointment_date") @db.Date
  startTime     String   @map("start_time") // TIME stored as string
  endTime       String   @map("end_time")   // TIME stored as string
  status        String   @default("scheduled") @db.VarChar(20) // scheduled, completed, cancelled, no_show
  paymentMethod String?  @map("payment_method") @db.VarChar(20)
  paymentStatus String   @default("pending") @map("payment_status") @db.VarChar(20) // pending, paid, cancelled
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  barber   Barber   @relation(fields: [barberId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  planUsage PlanUsage[]

  @@map("appointments")
}

model PlanUsage {
  id            String   @id @default(cuid())
  clientId      String   @map("client_id")
  appointmentId String   @map("appointment_id")
  serviceType   String   @map("service_type") @db.VarChar(50) // 'corte', 'barba'
  usedAt        DateTime @default(now()) @map("used_at")
  monthYear     String   @map("month_year") @db.VarChar(7) // format: 2025-01

  // Relations
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("plan_usage")
}
